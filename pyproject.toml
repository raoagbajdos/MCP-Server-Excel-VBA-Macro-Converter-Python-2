[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-mcp-vba-conversion"
version = "0.1.0"
description = "A Model Context Protocol server for converting Excel VBA to Python"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
maintainers = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["vba", "python", "excel", "mcp", "conversion", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Text Processing :: Markup",
]
requires-python = ">=3.8"
dependencies = [
    "fastmcp==0.2.0",
    "openpyxl==3.1.2",
    "xlwings==0.31.4",
    "pandas==2.1.4",
    "python-docx==1.1.0",
    "ast-tools==0.1.8",
    "black==23.12.1",
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.20",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.20",
    "pytest-cov>=4.0",
    "coverage>=7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.scripts]
vba-convert = "converter:main"
vba-batch-convert = "batch_converter:main"
vba-mcp-server = "mcp_server:main"

[project.urls]
Homepage = "https://github.com/yourusername/python-mcp-vba-conversion"
Repository = "https://github.com/yourusername/python-mcp-vba-conversion"
Documentation = "https://github.com/yourusername/python-mcp-vba-conversion#readme"
"Bug Tracker" = "https://github.com/yourusername/python-mcp-vba-conversion/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "openpyxl.*",
    "xlwings.*",
    "pandas.*",
    "fastmcp.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
